[assembly: System.CLSCompliant(false)]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Gateway.PersistenceTests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Gateway.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.InteropServices.ComVisible(false)]
namespace NServiceBus.Gateway
{
    public enum CallType
    {
        SingleCallSubmit = 0,
        SingleCallDatabusProperty = 1,
    }
    [System.Obsolete("Use `DataReceivedOnChannelEventArgs` instead. Will be removed in version 5.0.0.", true)]
    public class DataReceivedOnChannelArgs : System.EventArgs
    {
        public DataReceivedOnChannelArgs() { }
    }
    public class DataReceivedOnChannelEventArgs : System.EventArgs
    {
        public DataReceivedOnChannelEventArgs() { }
        public System.IO.Stream Data { get; set; }
        public System.Collections.Generic.IDictionary<string, string> Headers { get; set; }
    }
    public abstract class GatewayDeduplicationConfiguration
    {
        protected GatewayDeduplicationConfiguration() { }
        public abstract NServiceBus.Gateway.IGatewayDeduplicationStorage CreateStorage(System.IServiceProvider builder);
        public virtual void Setup(NServiceBus.Settings.IReadOnlySettings settings) { }
    }
    public interface IChannelReceiver
    {
        void Start(string address, int maxConcurrency, System.Func<NServiceBus.Gateway.DataReceivedOnChannelEventArgs, System.Threading.CancellationToken, System.Threading.Tasks.Task> dataReceivedOnChannel);
        System.Threading.Tasks.Task Stop(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IChannelSender
    {
        System.Threading.Tasks.Task Send(string remoteAddress, System.Collections.Generic.IDictionary<string, string> headers, System.IO.Stream data, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDeduplicationSession : System.IDisposable
    {
        bool IsDuplicate { get; }
        System.Threading.Tasks.Task MarkAsDispatched(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IGatewayDeduplicationStorage
    {
        bool SupportsDistributedTransactions { get; }
        System.Threading.Tasks.Task<NServiceBus.Gateway.IDeduplicationSession> CheckForDuplicate(string messageId, NServiceBus.Extensibility.ContextBag context, System.Threading.CancellationToken cancellationToken = default);
    }
    [System.Obsolete("Use `NonDurableDeduplicationConfiguration` instead. Will be removed in version 5." +
        "0.0.", true)]
    public class InMemoryDeduplicationConfiguration
    {
        public InMemoryDeduplicationConfiguration() { }
    }
    public class NonDurableDeduplicationConfiguration : NServiceBus.Gateway.GatewayDeduplicationConfiguration
    {
        public NonDurableDeduplicationConfiguration() { }
        public int CacheSize { get; set; }
        public override NServiceBus.Gateway.IGatewayDeduplicationStorage CreateStorage(System.IServiceProvider builder) { }
    }
    public class ReceiveChannel : NServiceBus.Gateway.Channels.Channel
    {
        public ReceiveChannel() { }
        public bool Default { get; set; }
        public int MaxConcurrency { get; set; }
        public override string ToString() { }
    }
}
namespace NServiceBus.Gateway.Channels
{
    public class Channel : System.IEquatable<NServiceBus.Gateway.Channels.Channel>
    {
        public Channel() { }
        public string Address { get; set; }
        public string Type { get; set; }
        public bool Equals(NServiceBus.Gateway.Channels.Channel other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
        public static bool operator !=(NServiceBus.Gateway.Channels.Channel left, NServiceBus.Gateway.Channels.Channel right) { }
        public static bool operator ==(NServiceBus.Gateway.Channels.Channel left, NServiceBus.Gateway.Channels.Channel right) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true)]
    public sealed class ChannelTypeAttribute : System.Attribute
    {
        public ChannelTypeAttribute(string type) { }
        public string Type { get; set; }
    }
}
namespace NServiceBus.Gateway.Routing
{
    public class Site
    {
        public Site() { }
        public NServiceBus.Gateway.Channels.Channel Channel { get; set; }
        public string Key { get; set; }
        public bool LegacyMode { get; set; }
    }
}
namespace NServiceBus
{
    public static class GatewayExtensions
    {
        [System.Obsolete("Gateway with no configuration is not supported. Use `Gateway(GatewayDeduplication" +
            "Configuration)` instead. The member currently throws a NotImplementedException. " +
            "Will be removed in version 5.0.0.", true)]
        public static NServiceBus.GatewaySettings Gateway(this NServiceBus.EndpointConfiguration config) { }
        public static NServiceBus.GatewaySettings Gateway(this NServiceBus.EndpointConfiguration config, NServiceBus.Gateway.GatewayDeduplicationConfiguration storageConfiguration) { }
    }
    public class GatewaySettings
    {
        public void AddReceiveChannel(string address, string type = "http", int maxConcurrency = 1, bool isDefault = false) { }
        public void AddSite(string siteKey, string address, string type = "http", bool legacyMode = false) { }
        public void ChannelFactories(System.Func<string, NServiceBus.Gateway.IChannelSender> senderFactory, System.Func<string, NServiceBus.Gateway.IChannelReceiver> receiverFactory) { }
        public void CustomRetryPolicy(System.Func<NServiceBus.Transport.IncomingMessage, System.Exception, int, System.TimeSpan> customRetryPolicy) { }
        public void DisableRetries() { }
        public void Retries(int numberOfRetries, System.TimeSpan timeIncrease) { }
        public void SetReplyToUri(string replyToUri, string type = "http") { }
        public void TransactionTimeout(System.TimeSpan timeout) { }
    }
    public static class MessageHandlerContextExtensions
    {
        public static System.Threading.Tasks.Task SendToSites(this NServiceBus.IMessageHandlerContext context, System.Collections.Generic.IEnumerable<string> siteKeys, object message) { }
        public static System.Threading.Tasks.Task SendToSites(this NServiceBus.IMessageSession context, System.Collections.Generic.IEnumerable<string> siteKeys, object message, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public static class SendOptionsExtensions
    {
        public static string[] GetSitesRoutingTo(this NServiceBus.SendOptions options) { }
        public static void RouteToSites(this NServiceBus.SendOptions options, params string[] siteKeys) { }
    }
}